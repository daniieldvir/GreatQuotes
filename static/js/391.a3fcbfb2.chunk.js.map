{"version":3,"file":"static/js/391.a3fcbfb2.chunk.js","mappings":"yLAIA,EAJa,SAACA,GACZ,OAAO,gBAAKC,UAAU,OAAf,SAAuBD,EAAME,Y,SCmEtC,EA9DkB,SAACF,GACjB,OAAoCG,EAAAA,EAAAA,WAAS,GAA7C,eAAOC,EAAP,KAAmBC,EAAnB,KACMC,GAAiBC,EAAAA,EAAAA,UACjBC,GAAeD,EAAAA,EAAAA,UAqBrB,OACE,UAAC,EAAAE,SAAD,YACE,SAAC,KAAD,CACEC,KAAMN,EACNO,QAAS,SAACC,GAAD,MACP,0EAGJ,SAAC,EAAD,WACE,kBACEC,QAlBmB,WACzBR,GAAc,IAkBRJ,UAAU,OACVa,SA/BR,SAA2BC,GACzBA,EAAMC,iBAEN,IAAMC,EAAgBX,EAAeY,QAAQC,MACvCC,EAAcZ,EAAaU,QAAQC,MAIzCnB,EAAMqB,WAAW,CAAEC,OAAQL,EAAeM,KAAMH,KAoB5C,UAIGpB,EAAMwB,YACL,gBAAKvB,UAAU,UAAf,UACE,SAACwB,EAAA,EAAD,OAIJ,iBAAKxB,UAAU,UAAf,WACE,kBAAOyB,QAAQ,SAAf,qBACA,kBAAOC,KAAK,OAAOC,GAAG,SAASC,IAAKvB,QAEtC,iBAAKL,UAAU,UAAf,WACE,kBAAOyB,QAAQ,OAAf,mBACA,qBAAUE,GAAG,OAAOE,KAAK,IAAID,IAAKrB,QAEpC,gBAAKP,UAAU,UAAf,UACE,mBAAQ8B,QAhCY,WAC5B1B,GAAc,IA+BkCJ,UAAU,MAAlD,kC,kBChCZ,EAnBiB,WACf,OAAgC+B,EAAAA,EAAAA,GAAQC,EAAAA,IAAhCC,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,OACfC,GAAUC,EAAAA,EAAAA,OAEhBC,EAAAA,EAAAA,YAAU,WACO,cAAXH,GACFC,EAAQG,KAAK,cAEd,CAACJ,EAAQC,IAMZ,OACE,SAAC,EAAD,CAAWZ,UAAsB,YAAXW,EAAsBd,WALtB,SAACmB,GACvBN,EAAYM","sources":["components/ui/Card.js","components/quotes/QuoteForm.js","pages/NewQuote.js"],"sourcesContent":["const Card = (props) => {\n  return <div className=\"card\">{props.children}</div>;\n};\n\nexport default Card;\n","import { Fragment, useRef, useState } from 'react';\nimport { Prompt } from 'react-router-dom';\n\nimport Card from '../ui/Card';\nimport LoadingSpinner from '../ui/LoadingSpinner';\n\nconst QuoteForm = (props) => {\n  const [isEntering, setIsEntering] = useState(false);\n  const authorInputRef = useRef();\n  const textInputRef = useRef();\n\n  function submitFormHandler(event) {\n    event.preventDefault();\n\n    const enteredAuthor = authorInputRef.current.value;\n    const enteredText = textInputRef.current.value;\n\n    // optional: Could validate here\n\n    props.onAddQuote({ author: enteredAuthor, text: enteredText });\n  }\n\n  const formFocusedHandler = () => {\n    setIsEntering(true);\n  };\n\n  const finishEnteringHandler = () => {\n    setIsEntering(false);\n  };\n\n  return (\n    <Fragment>\n      <Prompt\n        when={isEntering}\n        message={(location) =>\n          'Are you sure you want to leave? All your entered data will be lost!'\n        }\n      />\n      <Card>\n        <form\n          onFocus={formFocusedHandler}\n          className=\"form\"\n          onSubmit={submitFormHandler}>\n          {props.isLoading && (\n            <div className=\"loading\">\n              <LoadingSpinner />\n            </div>\n          )}\n\n          <div className=\"control\">\n            <label htmlFor=\"author\">Author</label>\n            <input type=\"text\" id=\"author\" ref={authorInputRef} />\n          </div>\n          <div className=\"control\">\n            <label htmlFor=\"text\">Text</label>\n            <textarea id=\"text\" rows=\"5\" ref={textInputRef}></textarea>\n          </div>\n          <div className=\"actions\">\n            <button onClick={finishEnteringHandler} className=\"btn\">\n              Add Quote\n            </button>\n          </div>\n        </form>\n      </Card>\n    </Fragment>\n  );\n};\n\nexport default QuoteForm;\n","import { useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\n\nimport QuoteForm from '../components/quotes/QuoteForm';\nimport useHttp from '../hooks/use-http';\nimport { addQuote } from '../lib/api';\n\nconst NewQuote = () => {\n  const { sendRequest, status } = useHttp(addQuote);\n  const history = useHistory();\n\n  useEffect(() => {\n    if (status === 'completed') {\n      history.push('/quotes/');\n    }\n  }, [status, history]);\n\n  const addQuoteHandler = (quoteData) => {\n    sendRequest(quoteData);\n  };\n\n  return (\n    <QuoteForm isLoading={status === 'pending'} onAddQuote={addQuoteHandler} />\n  );\n};\n\nexport default NewQuote;\n"],"names":["props","className","children","useState","isEntering","setIsEntering","authorInputRef","useRef","textInputRef","Fragment","when","message","location","onFocus","onSubmit","event","preventDefault","enteredAuthor","current","value","enteredText","onAddQuote","author","text","isLoading","LoadingSpinner","htmlFor","type","id","ref","rows","onClick","useHttp","addQuote","sendRequest","status","history","useHistory","useEffect","push","quoteData"],"sourceRoot":""}